#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Aug 29 16:15:06 2020 by generateDS.py version 2.36.1.
# Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)]
#
# Command line options:
#   ('-o', 'plink.py')
#
# Command line arguments:
#   plink.xsd
#
# Command line:
#   C:\dev\Python\Scripts\generateDS -o "plink.py" plink.xsd
#
# Current working directory (os.getcwd()):
#   MCLinkReport
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Protocol(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CalibOrderN=None, CalibCustomN=None, Scale=None, CalibDate=None, NextCalibDate=None, Pipette=None, VerifUser=None, AirTemp=None, AirHum=None, AirPress=None, WaterDensity=None, WaterTemp=None, Channels=None, Z=None, Method=None, Test11Value=None, Test12Value=None, Test13Value=None, Test21Value=None, Test22Value=None, Test23Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CalibOrderN = CalibOrderN
        self.CalibOrderN_nsprefix_ = None
        self.CalibCustomN = CalibCustomN
        self.CalibCustomN_nsprefix_ = None
        self.Scale = Scale
        self.Scale_nsprefix_ = None
        self.CalibDate = CalibDate
        self.CalibDate_nsprefix_ = None
        self.NextCalibDate = NextCalibDate
        self.NextCalibDate_nsprefix_ = None
        self.Pipette = Pipette
        self.Pipette_nsprefix_ = None
        self.VerifUser = VerifUser
        self.VerifUser_nsprefix_ = None
        self.AirTemp = AirTemp
        self.AirTemp_nsprefix_ = None
        self.AirHum = AirHum
        self.AirHum_nsprefix_ = None
        self.AirPress = AirPress
        self.AirPress_nsprefix_ = None
        self.WaterDensity = WaterDensity
        self.WaterDensity_nsprefix_ = None
        self.WaterTemp = WaterTemp
        self.WaterTemp_nsprefix_ = None
        self.Channels = Channels
        self.Channels_nsprefix_ = None
        self.Z = Z
        self.Z_nsprefix_ = None
        self.Method = Method
        self.Method_nsprefix_ = None
        self.Test11Value = Test11Value
        self.Test11Value_nsprefix_ = None
        self.Test12Value = Test12Value
        self.Test12Value_nsprefix_ = None
        self.Test13Value = Test13Value
        self.Test13Value_nsprefix_ = None
        self.Test21Value = Test21Value
        self.Test21Value_nsprefix_ = None
        self.Test22Value = Test22Value
        self.Test22Value_nsprefix_ = None
        self.Test23Value = Test23Value
        self.Test23Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Protocol)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Protocol.subclass:
            return Protocol.subclass(*args_, **kwargs_)
        else:
            return Protocol(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CalibOrderN(self):
        return self.CalibOrderN
    def set_CalibOrderN(self, CalibOrderN):
        self.CalibOrderN = CalibOrderN
    def get_CalibCustomN(self):
        return self.CalibCustomN
    def set_CalibCustomN(self, CalibCustomN):
        self.CalibCustomN = CalibCustomN
    def get_Scale(self):
        return self.Scale
    def set_Scale(self, Scale):
        self.Scale = Scale
    def get_CalibDate(self):
        return self.CalibDate
    def set_CalibDate(self, CalibDate):
        self.CalibDate = CalibDate
    def get_NextCalibDate(self):
        return self.NextCalibDate
    def set_NextCalibDate(self, NextCalibDate):
        self.NextCalibDate = NextCalibDate
    def get_Pipette(self):
        return self.Pipette
    def set_Pipette(self, Pipette):
        self.Pipette = Pipette
    def get_VerifUser(self):
        return self.VerifUser
    def set_VerifUser(self, VerifUser):
        self.VerifUser = VerifUser
    def get_AirTemp(self):
        return self.AirTemp
    def set_AirTemp(self, AirTemp):
        self.AirTemp = AirTemp
    def get_AirHum(self):
        return self.AirHum
    def set_AirHum(self, AirHum):
        self.AirHum = AirHum
    def get_AirPress(self):
        return self.AirPress
    def set_AirPress(self, AirPress):
        self.AirPress = AirPress
    def get_WaterDensity(self):
        return self.WaterDensity
    def set_WaterDensity(self, WaterDensity):
        self.WaterDensity = WaterDensity
    def get_WaterTemp(self):
        return self.WaterTemp
    def set_WaterTemp(self, WaterTemp):
        self.WaterTemp = WaterTemp
    def get_Channels(self):
        return self.Channels
    def set_Channels(self, Channels):
        self.Channels = Channels
    def get_Z(self):
        return self.Z
    def set_Z(self, Z):
        self.Z = Z
    def get_Method(self):
        return self.Method
    def set_Method(self, Method):
        self.Method = Method
    def get_Test11Value(self):
        return self.Test11Value
    def set_Test11Value(self, Test11Value):
        self.Test11Value = Test11Value
    def get_Test12Value(self):
        return self.Test12Value
    def set_Test12Value(self, Test12Value):
        self.Test12Value = Test12Value
    def get_Test13Value(self):
        return self.Test13Value
    def set_Test13Value(self, Test13Value):
        self.Test13Value = Test13Value
    def get_Test21Value(self):
        return self.Test21Value
    def set_Test21Value(self, Test21Value):
        self.Test21Value = Test21Value
    def get_Test22Value(self):
        return self.Test22Value
    def set_Test22Value(self, Test22Value):
        self.Test22Value = Test22Value
    def get_Test23Value(self):
        return self.Test23Value
    def set_Test23Value(self, Test23Value):
        self.Test23Value = Test23Value
    def hasContent_(self):
        if (
            self.CalibOrderN is not None or
            self.CalibCustomN is not None or
            self.Scale is not None or
            self.CalibDate is not None or
            self.NextCalibDate is not None or
            self.Pipette is not None or
            self.VerifUser is not None or
            self.AirTemp is not None or
            self.AirHum is not None or
            self.AirPress is not None or
            self.WaterDensity is not None or
            self.WaterTemp is not None or
            self.Channels is not None or
            self.Z is not None or
            self.Method is not None or
            self.Test11Value is not None or
            self.Test12Value is not None or
            self.Test13Value is not None or
            self.Test21Value is not None or
            self.Test22Value is not None or
            self.Test23Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Protocol', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Protocol')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Protocol':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Protocol')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Protocol', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Protocol'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Protocol', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CalibOrderN is not None:
            namespaceprefix_ = self.CalibOrderN_nsprefix_ + ':' if (UseCapturedNS_ and self.CalibOrderN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCalibOrderN>%s</%sCalibOrderN>%s' % (namespaceprefix_ , self.gds_format_integer(self.CalibOrderN, input_name='CalibOrderN'), namespaceprefix_ , eol_))
        if self.CalibCustomN is not None:
            namespaceprefix_ = self.CalibCustomN_nsprefix_ + ':' if (UseCapturedNS_ and self.CalibCustomN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCalibCustomN>%s</%sCalibCustomN>%s' % (namespaceprefix_ , self.gds_format_integer(self.CalibCustomN, input_name='CalibCustomN'), namespaceprefix_ , eol_))
        if self.Scale is not None:
            namespaceprefix_ = self.Scale_nsprefix_ + ':' if (UseCapturedNS_ and self.Scale_nsprefix_) else ''
            self.Scale.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Scale', pretty_print=pretty_print)
        if self.CalibDate is not None:
            namespaceprefix_ = self.CalibDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CalibDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCalibDate>%s</%sCalibDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CalibDate), input_name='CalibDate')), namespaceprefix_ , eol_))
        if self.NextCalibDate is not None:
            namespaceprefix_ = self.NextCalibDate_nsprefix_ + ':' if (UseCapturedNS_ and self.NextCalibDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNextCalibDate>%s</%sNextCalibDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NextCalibDate), input_name='NextCalibDate')), namespaceprefix_ , eol_))
        if self.Pipette is not None:
            namespaceprefix_ = self.Pipette_nsprefix_ + ':' if (UseCapturedNS_ and self.Pipette_nsprefix_) else ''
            self.Pipette.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Pipette', pretty_print=pretty_print)
        if self.VerifUser is not None:
            namespaceprefix_ = self.VerifUser_nsprefix_ + ':' if (UseCapturedNS_ and self.VerifUser_nsprefix_) else ''
            self.VerifUser.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VerifUser', pretty_print=pretty_print)
        if self.AirTemp is not None:
            namespaceprefix_ = self.AirTemp_nsprefix_ + ':' if (UseCapturedNS_ and self.AirTemp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirTemp>%s</%sAirTemp>%s' % (namespaceprefix_ , self.gds_format_integer(self.AirTemp, input_name='AirTemp'), namespaceprefix_ , eol_))
        if self.AirHum is not None:
            namespaceprefix_ = self.AirHum_nsprefix_ + ':' if (UseCapturedNS_ and self.AirHum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirHum>%s</%sAirHum>%s' % (namespaceprefix_ , self.gds_format_integer(self.AirHum, input_name='AirHum'), namespaceprefix_ , eol_))
        if self.AirPress is not None:
            namespaceprefix_ = self.AirPress_nsprefix_ + ':' if (UseCapturedNS_ and self.AirPress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirPress>%s</%sAirPress>%s' % (namespaceprefix_ , self.gds_format_integer(self.AirPress, input_name='AirPress'), namespaceprefix_ , eol_))
        if self.WaterDensity is not None:
            namespaceprefix_ = self.WaterDensity_nsprefix_ + ':' if (UseCapturedNS_ and self.WaterDensity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWaterDensity>%s</%sWaterDensity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.WaterDensity, input_name='WaterDensity'), namespaceprefix_ , eol_))
        if self.WaterTemp is not None:
            namespaceprefix_ = self.WaterTemp_nsprefix_ + ':' if (UseCapturedNS_ and self.WaterTemp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWaterTemp>%s</%sWaterTemp>%s' % (namespaceprefix_ , self.gds_format_integer(self.WaterTemp, input_name='WaterTemp'), namespaceprefix_ , eol_))
        if self.Channels is not None:
            namespaceprefix_ = self.Channels_nsprefix_ + ':' if (UseCapturedNS_ and self.Channels_nsprefix_) else ''
            self.Channels.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Channels', pretty_print=pretty_print)
        if self.Z is not None:
            namespaceprefix_ = self.Z_nsprefix_ + ':' if (UseCapturedNS_ and self.Z_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sZ>%s</%sZ>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Z, input_name='Z'), namespaceprefix_ , eol_))
        if self.Method is not None:
            namespaceprefix_ = self.Method_nsprefix_ + ':' if (UseCapturedNS_ and self.Method_nsprefix_) else ''
            self.Method.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Method', pretty_print=pretty_print)
        if self.Test11Value is not None:
            namespaceprefix_ = self.Test11Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Test11Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest11Value>%s</%sTest11Value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test11Value), input_name='Test11Value')), namespaceprefix_ , eol_))
        if self.Test12Value is not None:
            namespaceprefix_ = self.Test12Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Test12Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest12Value>%s</%sTest12Value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test12Value), input_name='Test12Value')), namespaceprefix_ , eol_))
        if self.Test13Value is not None:
            namespaceprefix_ = self.Test13Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Test13Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest13Value>%s</%sTest13Value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test13Value), input_name='Test13Value')), namespaceprefix_ , eol_))
        if self.Test21Value is not None:
            namespaceprefix_ = self.Test21Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Test21Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest21Value>%s</%sTest21Value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test21Value), input_name='Test21Value')), namespaceprefix_ , eol_))
        if self.Test22Value is not None:
            namespaceprefix_ = self.Test22Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Test22Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest22Value>%s</%sTest22Value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test22Value), input_name='Test22Value')), namespaceprefix_ , eol_))
        if self.Test23Value is not None:
            namespaceprefix_ = self.Test23Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Test23Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest23Value>%s</%sTest23Value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test23Value), input_name='Test23Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CalibOrderN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CalibOrderN')
            ival_ = self.gds_validate_integer(ival_, node, 'CalibOrderN')
            self.CalibOrderN = ival_
            self.CalibOrderN_nsprefix_ = child_.prefix
        elif nodeName_ == 'CalibCustomN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CalibCustomN')
            ival_ = self.gds_validate_integer(ival_, node, 'CalibCustomN')
            self.CalibCustomN = ival_
            self.CalibCustomN_nsprefix_ = child_.prefix
        elif nodeName_ == 'Scale':
            obj_ = ScaleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Scale = obj_
            obj_.original_tagname_ = 'Scale'
        elif nodeName_ == 'CalibDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CalibDate')
            value_ = self.gds_validate_string(value_, node, 'CalibDate')
            self.CalibDate = value_
            self.CalibDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'NextCalibDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NextCalibDate')
            value_ = self.gds_validate_string(value_, node, 'NextCalibDate')
            self.NextCalibDate = value_
            self.NextCalibDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Pipette':
            obj_ = PipetteType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Pipette = obj_
            obj_.original_tagname_ = 'Pipette'
        elif nodeName_ == 'VerifUser':
            obj_ = VerifUserType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VerifUser = obj_
            obj_.original_tagname_ = 'VerifUser'
        elif nodeName_ == 'AirTemp' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AirTemp')
            ival_ = self.gds_validate_integer(ival_, node, 'AirTemp')
            self.AirTemp = ival_
            self.AirTemp_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirHum' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AirHum')
            ival_ = self.gds_validate_integer(ival_, node, 'AirHum')
            self.AirHum = ival_
            self.AirHum_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirPress' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AirPress')
            ival_ = self.gds_validate_integer(ival_, node, 'AirPress')
            self.AirPress = ival_
            self.AirPress_nsprefix_ = child_.prefix
        elif nodeName_ == 'WaterDensity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'WaterDensity')
            fval_ = self.gds_validate_decimal(fval_, node, 'WaterDensity')
            self.WaterDensity = fval_
            self.WaterDensity_nsprefix_ = child_.prefix
        elif nodeName_ == 'WaterTemp' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'WaterTemp')
            ival_ = self.gds_validate_integer(ival_, node, 'WaterTemp')
            self.WaterTemp = ival_
            self.WaterTemp_nsprefix_ = child_.prefix
        elif nodeName_ == 'Channels':
            obj_ = ChannelsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Channels = obj_
            obj_.original_tagname_ = 'Channels'
        elif nodeName_ == 'Z' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Z')
            fval_ = self.gds_validate_decimal(fval_, node, 'Z')
            self.Z = fval_
            self.Z_nsprefix_ = child_.prefix
        elif nodeName_ == 'Method':
            obj_ = MethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Method = obj_
            obj_.original_tagname_ = 'Method'
        elif nodeName_ == 'Test11Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test11Value')
            value_ = self.gds_validate_string(value_, node, 'Test11Value')
            self.Test11Value = value_
            self.Test11Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test12Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test12Value')
            value_ = self.gds_validate_string(value_, node, 'Test12Value')
            self.Test12Value = value_
            self.Test12Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test13Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test13Value')
            value_ = self.gds_validate_string(value_, node, 'Test13Value')
            self.Test13Value = value_
            self.Test13Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test21Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test21Value')
            value_ = self.gds_validate_string(value_, node, 'Test21Value')
            self.Test21Value = value_
            self.Test21Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test22Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test22Value')
            value_ = self.gds_validate_string(value_, node, 'Test22Value')
            self.Test22Value = value_
            self.Test22Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test23Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test23Value')
            value_ = self.gds_validate_string(value_, node, 'Test23Value')
            self.Test23Value = value_
            self.Test23Value_nsprefix_ = child_.prefix
# end class Protocol


class ScaleType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ID=None, Name=None, SerialNumber=None, ConnectionInfo=None, ScaleType_member=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ID = ID
        self.ID_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.SerialNumber = SerialNumber
        self.SerialNumber_nsprefix_ = None
        self.ConnectionInfo = ConnectionInfo
        self.ConnectionInfo_nsprefix_ = None
        self.ScaleType = ScaleType_member
        self.ScaleType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScaleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScaleType.subclass:
            return ScaleType.subclass(*args_, **kwargs_)
        else:
            return ScaleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ID(self):
        return self.ID
    def set_ID(self, ID):
        self.ID = ID
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_SerialNumber(self):
        return self.SerialNumber
    def set_SerialNumber(self, SerialNumber):
        self.SerialNumber = SerialNumber
    def get_ConnectionInfo(self):
        return self.ConnectionInfo
    def set_ConnectionInfo(self, ConnectionInfo):
        self.ConnectionInfo = ConnectionInfo
    def get_ScaleType(self):
        return self.ScaleType
    def set_ScaleType(self, ScaleType):
        self.ScaleType = ScaleType
    def hasContent_(self):
        if (
            self.ID is not None or
            self.Name is not None or
            self.SerialNumber is not None or
            self.ConnectionInfo is not None or
            self.ScaleType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ScaleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScaleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ScaleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ScaleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ScaleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ScaleType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ScaleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            namespaceprefix_ = self.ID_nsprefix_ + ':' if (UseCapturedNS_ and self.ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sID>%s</%sID>%s' % (namespaceprefix_ , self.gds_format_integer(self.ID, input_name='ID'), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.SerialNumber is not None:
            namespaceprefix_ = self.SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SerialNumber), input_name='SerialNumber')), namespaceprefix_ , eol_))
        if self.ConnectionInfo is not None:
            namespaceprefix_ = self.ConnectionInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.ConnectionInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConnectionInfo>%s</%sConnectionInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConnectionInfo), input_name='ConnectionInfo')), namespaceprefix_ , eol_))
        if self.ScaleType is not None:
            namespaceprefix_ = self.ScaleType_nsprefix_ + ':' if (UseCapturedNS_ and self.ScaleType_nsprefix_) else ''
            self.ScaleType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ScaleType', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ID' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ID')
            ival_ = self.gds_validate_integer(ival_, node, 'ID')
            self.ID = ival_
            self.ID_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'SerialNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SerialNumber')
            value_ = self.gds_validate_string(value_, node, 'SerialNumber')
            self.SerialNumber = value_
            self.SerialNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ConnectionInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ConnectionInfo')
            value_ = self.gds_validate_string(value_, node, 'ConnectionInfo')
            self.ConnectionInfo = value_
            self.ConnectionInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'ScaleType':
            obj_ = ScaleTypeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ScaleType = obj_
            obj_.original_tagname_ = 'ScaleType'
# end class ScaleType


class ScaleTypeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Model=None, Manufacturer=None, Class=None, Capacity=None, Resolution=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Model = Model
        self.Model_nsprefix_ = None
        self.Manufacturer = Manufacturer
        self.Manufacturer_nsprefix_ = None
        self.Class = Class
        self.Class_nsprefix_ = None
        self.Capacity = Capacity
        self.Capacity_nsprefix_ = None
        self.Resolution = Resolution
        self.Resolution_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScaleTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScaleTypeType.subclass:
            return ScaleTypeType.subclass(*args_, **kwargs_)
        else:
            return ScaleTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Model(self):
        return self.Model
    def set_Model(self, Model):
        self.Model = Model
    def get_Manufacturer(self):
        return self.Manufacturer
    def set_Manufacturer(self, Manufacturer):
        self.Manufacturer = Manufacturer
    def get_Class(self):
        return self.Class
    def set_Class(self, Class):
        self.Class = Class
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_Resolution(self):
        return self.Resolution
    def set_Resolution(self, Resolution):
        self.Resolution = Resolution
    def hasContent_(self):
        if (
            self.Model is not None or
            self.Manufacturer is not None or
            self.Class is not None or
            self.Capacity is not None or
            self.Resolution is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ScaleTypeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScaleTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ScaleTypeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ScaleTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ScaleTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ScaleTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ScaleTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Model is not None:
            namespaceprefix_ = self.Model_nsprefix_ + ':' if (UseCapturedNS_ and self.Model_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModel>%s</%sModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Model), input_name='Model')), namespaceprefix_ , eol_))
        if self.Manufacturer is not None:
            namespaceprefix_ = self.Manufacturer_nsprefix_ + ':' if (UseCapturedNS_ and self.Manufacturer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturer>%s</%sManufacturer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Manufacturer), input_name='Manufacturer')), namespaceprefix_ , eol_))
        if self.Class is not None:
            namespaceprefix_ = self.Class_nsprefix_ + ':' if (UseCapturedNS_ and self.Class_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClass>%s</%sClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Class), input_name='Class')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Capacity), input_name='Capacity')), namespaceprefix_ , eol_))
        if self.Resolution is not None:
            namespaceprefix_ = self.Resolution_nsprefix_ + ':' if (UseCapturedNS_ and self.Resolution_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResolution>%s</%sResolution>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Resolution), input_name='Resolution')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Model':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Model')
            value_ = self.gds_validate_string(value_, node, 'Model')
            self.Model = value_
            self.Model_nsprefix_ = child_.prefix
        elif nodeName_ == 'Manufacturer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Manufacturer')
            value_ = self.gds_validate_string(value_, node, 'Manufacturer')
            self.Manufacturer = value_
            self.Manufacturer_nsprefix_ = child_.prefix
        elif nodeName_ == 'Class':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Class')
            value_ = self.gds_validate_string(value_, node, 'Class')
            self.Class = value_
            self.Class_nsprefix_ = child_.prefix
        elif nodeName_ == 'Capacity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Capacity')
            value_ = self.gds_validate_string(value_, node, 'Capacity')
            self.Capacity = value_
            self.Capacity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Resolution':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Resolution')
            value_ = self.gds_validate_string(value_, node, 'Resolution')
            self.Resolution = value_
            self.Resolution_nsprefix_ = child_.prefix
# end class ScaleTypeType


class PipetteType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Owner=None, PipetteType_member=None, SerialNumber=None, Year=None, Manufacturer=None, Model=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Owner = Owner
        self.Owner_nsprefix_ = None
        self.PipetteType = PipetteType_member
        self.PipetteType_nsprefix_ = None
        self.SerialNumber = SerialNumber
        self.SerialNumber_nsprefix_ = None
        self.Year = Year
        self.Year_nsprefix_ = None
        self.Manufacturer = Manufacturer
        self.Manufacturer_nsprefix_ = None
        self.Model = Model
        self.Model_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PipetteType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PipetteType.subclass:
            return PipetteType.subclass(*args_, **kwargs_)
        else:
            return PipetteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Owner(self):
        return self.Owner
    def set_Owner(self, Owner):
        self.Owner = Owner
    def get_PipetteType(self):
        return self.PipetteType
    def set_PipetteType(self, PipetteType):
        self.PipetteType = PipetteType
    def get_SerialNumber(self):
        return self.SerialNumber
    def set_SerialNumber(self, SerialNumber):
        self.SerialNumber = SerialNumber
    def get_Year(self):
        return self.Year
    def set_Year(self, Year):
        self.Year = Year
    def get_Manufacturer(self):
        return self.Manufacturer
    def set_Manufacturer(self, Manufacturer):
        self.Manufacturer = Manufacturer
    def get_Model(self):
        return self.Model
    def set_Model(self, Model):
        self.Model = Model
    def hasContent_(self):
        if (
            self.Owner is not None or
            self.PipetteType is not None or
            self.SerialNumber is not None or
            self.Year is not None or
            self.Manufacturer is not None or
            self.Model is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PipetteType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PipetteType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PipetteType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PipetteType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PipetteType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PipetteType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PipetteType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Owner is not None:
            namespaceprefix_ = self.Owner_nsprefix_ + ':' if (UseCapturedNS_ and self.Owner_nsprefix_) else ''
            self.Owner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Owner', pretty_print=pretty_print)
        if self.PipetteType is not None:
            namespaceprefix_ = self.PipetteType_nsprefix_ + ':' if (UseCapturedNS_ and self.PipetteType_nsprefix_) else ''
            self.PipetteType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PipetteType', pretty_print=pretty_print)
        if self.SerialNumber is not None:
            namespaceprefix_ = self.SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SerialNumber, input_name='SerialNumber'), namespaceprefix_ , eol_))
        if self.Year is not None:
            namespaceprefix_ = self.Year_nsprefix_ + ':' if (UseCapturedNS_ and self.Year_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYear>%s</%sYear>%s' % (namespaceprefix_ , self.gds_format_integer(self.Year, input_name='Year'), namespaceprefix_ , eol_))
        if self.Manufacturer is not None:
            namespaceprefix_ = self.Manufacturer_nsprefix_ + ':' if (UseCapturedNS_ and self.Manufacturer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturer>%s</%sManufacturer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Manufacturer), input_name='Manufacturer')), namespaceprefix_ , eol_))
        if self.Model is not None:
            namespaceprefix_ = self.Model_nsprefix_ + ':' if (UseCapturedNS_ and self.Model_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModel>%s</%sModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Model), input_name='Model')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Owner':
            obj_ = OwnerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Owner = obj_
            obj_.original_tagname_ = 'Owner'
        elif nodeName_ == 'PipetteType':
            obj_ = PipetteTypeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PipetteType = obj_
            obj_.original_tagname_ = 'PipetteType'
        elif nodeName_ == 'SerialNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SerialNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'SerialNumber')
            self.SerialNumber = ival_
            self.SerialNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Year' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Year')
            ival_ = self.gds_validate_integer(ival_, node, 'Year')
            self.Year = ival_
            self.Year_nsprefix_ = child_.prefix
        elif nodeName_ == 'Manufacturer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Manufacturer')
            value_ = self.gds_validate_string(value_, node, 'Manufacturer')
            self.Manufacturer = value_
            self.Manufacturer_nsprefix_ = child_.prefix
        elif nodeName_ == 'Model':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Model')
            value_ = self.gds_validate_string(value_, node, 'Model')
            self.Model = value_
            self.Model_nsprefix_ = child_.prefix
# end class PipetteType


class OwnerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, INN=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.INN = INN
        self.INN_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OwnerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OwnerType.subclass:
            return OwnerType.subclass(*args_, **kwargs_)
        else:
            return OwnerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.INN is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OwnerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OwnerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OwnerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OwnerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OwnerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OwnerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OwnerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_format_integer(self.INN, input_name='INN'), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress>%s</%sAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Address), input_name='Address')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'INN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'INN')
            ival_ = self.gds_validate_integer(ival_, node, 'INN')
            self.INN = ival_
            self.INN_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Address')
            value_ = self.gds_validate_string(value_, node, 'Address')
            self.Address = value_
            self.Address_nsprefix_ = child_.prefix
# end class OwnerType


class PipetteTypeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CheckMethod=None, Feature=None, TypeInfo=None, RegisterNumber=None, VolumeInfo=None, RelAvgDeviation=None, RelSKODeviation=None, CalibMethod=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CheckMethod = CheckMethod
        self.CheckMethod_nsprefix_ = None
        self.Feature = Feature
        self.Feature_nsprefix_ = None
        self.TypeInfo = TypeInfo
        self.TypeInfo_nsprefix_ = None
        self.RegisterNumber = RegisterNumber
        self.RegisterNumber_nsprefix_ = None
        self.VolumeInfo = VolumeInfo
        self.VolumeInfo_nsprefix_ = None
        self.RelAvgDeviation = RelAvgDeviation
        self.RelAvgDeviation_nsprefix_ = None
        self.RelSKODeviation = RelSKODeviation
        self.RelSKODeviation_nsprefix_ = None
        self.CalibMethod = CalibMethod
        self.CalibMethod_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PipetteTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PipetteTypeType.subclass:
            return PipetteTypeType.subclass(*args_, **kwargs_)
        else:
            return PipetteTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CheckMethod(self):
        return self.CheckMethod
    def set_CheckMethod(self, CheckMethod):
        self.CheckMethod = CheckMethod
    def get_Feature(self):
        return self.Feature
    def set_Feature(self, Feature):
        self.Feature = Feature
    def get_TypeInfo(self):
        return self.TypeInfo
    def set_TypeInfo(self, TypeInfo):
        self.TypeInfo = TypeInfo
    def get_RegisterNumber(self):
        return self.RegisterNumber
    def set_RegisterNumber(self, RegisterNumber):
        self.RegisterNumber = RegisterNumber
    def get_VolumeInfo(self):
        return self.VolumeInfo
    def set_VolumeInfo(self, VolumeInfo):
        self.VolumeInfo = VolumeInfo
    def get_RelAvgDeviation(self):
        return self.RelAvgDeviation
    def set_RelAvgDeviation(self, RelAvgDeviation):
        self.RelAvgDeviation = RelAvgDeviation
    def get_RelSKODeviation(self):
        return self.RelSKODeviation
    def set_RelSKODeviation(self, RelSKODeviation):
        self.RelSKODeviation = RelSKODeviation
    def get_CalibMethod(self):
        return self.CalibMethod
    def set_CalibMethod(self, CalibMethod):
        self.CalibMethod = CalibMethod
    def hasContent_(self):
        if (
            self.CheckMethod is not None or
            self.Feature is not None or
            self.TypeInfo is not None or
            self.RegisterNumber is not None or
            self.VolumeInfo is not None or
            self.RelAvgDeviation is not None or
            self.RelSKODeviation is not None or
            self.CalibMethod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PipetteTypeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PipetteTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PipetteTypeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PipetteTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PipetteTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PipetteTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PipetteTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CheckMethod is not None:
            namespaceprefix_ = self.CheckMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.CheckMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCheckMethod>%s</%sCheckMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CheckMethod), input_name='CheckMethod')), namespaceprefix_ , eol_))
        if self.Feature is not None:
            namespaceprefix_ = self.Feature_nsprefix_ + ':' if (UseCapturedNS_ and self.Feature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeature>%s</%sFeature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Feature), input_name='Feature')), namespaceprefix_ , eol_))
        if self.TypeInfo is not None:
            namespaceprefix_ = self.TypeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeInfo>%s</%sTypeInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeInfo), input_name='TypeInfo')), namespaceprefix_ , eol_))
        if self.RegisterNumber is not None:
            namespaceprefix_ = self.RegisterNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RegisterNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegisterNumber>%s</%sRegisterNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegisterNumber), input_name='RegisterNumber')), namespaceprefix_ , eol_))
        if self.VolumeInfo is not None:
            namespaceprefix_ = self.VolumeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.VolumeInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeInfo>%s</%sVolumeInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VolumeInfo), input_name='VolumeInfo')), namespaceprefix_ , eol_))
        if self.RelAvgDeviation is not None:
            namespaceprefix_ = self.RelAvgDeviation_nsprefix_ + ':' if (UseCapturedNS_ and self.RelAvgDeviation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelAvgDeviation>%s</%sRelAvgDeviation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RelAvgDeviation), input_name='RelAvgDeviation')), namespaceprefix_ , eol_))
        if self.RelSKODeviation is not None:
            namespaceprefix_ = self.RelSKODeviation_nsprefix_ + ':' if (UseCapturedNS_ and self.RelSKODeviation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelSKODeviation>%s</%sRelSKODeviation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RelSKODeviation), input_name='RelSKODeviation')), namespaceprefix_ , eol_))
        if self.CalibMethod is not None:
            namespaceprefix_ = self.CalibMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.CalibMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCalibMethod>%s</%sCalibMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CalibMethod), input_name='CalibMethod')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CheckMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CheckMethod')
            value_ = self.gds_validate_string(value_, node, 'CheckMethod')
            self.CheckMethod = value_
            self.CheckMethod_nsprefix_ = child_.prefix
        elif nodeName_ == 'Feature':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Feature')
            value_ = self.gds_validate_string(value_, node, 'Feature')
            self.Feature = value_
            self.Feature_nsprefix_ = child_.prefix
        elif nodeName_ == 'TypeInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeInfo')
            value_ = self.gds_validate_string(value_, node, 'TypeInfo')
            self.TypeInfo = value_
            self.TypeInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegisterNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegisterNumber')
            value_ = self.gds_validate_string(value_, node, 'RegisterNumber')
            self.RegisterNumber = value_
            self.RegisterNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'VolumeInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VolumeInfo')
            value_ = self.gds_validate_string(value_, node, 'VolumeInfo')
            self.VolumeInfo = value_
            self.VolumeInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'RelAvgDeviation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RelAvgDeviation')
            value_ = self.gds_validate_string(value_, node, 'RelAvgDeviation')
            self.RelAvgDeviation = value_
            self.RelAvgDeviation_nsprefix_ = child_.prefix
        elif nodeName_ == 'RelSKODeviation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RelSKODeviation')
            value_ = self.gds_validate_string(value_, node, 'RelSKODeviation')
            self.RelSKODeviation = value_
            self.RelSKODeviation_nsprefix_ = child_.prefix
        elif nodeName_ == 'CalibMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CalibMethod')
            value_ = self.gds_validate_string(value_, node, 'CalibMethod')
            self.CalibMethod = value_
            self.CalibMethod_nsprefix_ = child_.prefix
# end class PipetteTypeType


class VerifUserType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SecondName=None, FullName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SecondName = SecondName
        self.SecondName_nsprefix_ = None
        self.FullName = FullName
        self.FullName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VerifUserType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VerifUserType.subclass:
            return VerifUserType.subclass(*args_, **kwargs_)
        else:
            return VerifUserType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SecondName(self):
        return self.SecondName
    def set_SecondName(self, SecondName):
        self.SecondName = SecondName
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def hasContent_(self):
        if (
            self.SecondName is not None or
            self.FullName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VerifUserType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VerifUserType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VerifUserType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VerifUserType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VerifUserType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VerifUserType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VerifUserType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SecondName is not None:
            namespaceprefix_ = self.SecondName_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondName>%s</%sSecondName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondName), input_name='SecondName')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SecondName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecondName')
            value_ = self.gds_validate_string(value_, node, 'SecondName')
            self.SecondName = value_
            self.SecondName_nsprefix_ = child_.prefix
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
# end class VerifUserType


class ChannelsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Channel=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Channel = Channel
        self.Channel_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChannelsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChannelsType.subclass:
            return ChannelsType.subclass(*args_, **kwargs_)
        else:
            return ChannelsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Channel(self):
        return self.Channel
    def set_Channel(self, Channel):
        self.Channel = Channel
    def hasContent_(self):
        if (
            self.Channel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ChannelsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ChannelsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ChannelsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ChannelsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ChannelsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ChannelsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ChannelsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Channel is not None:
            namespaceprefix_ = self.Channel_nsprefix_ + ':' if (UseCapturedNS_ and self.Channel_nsprefix_) else ''
            self.Channel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Channel', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Channel':
            obj_ = ChannelType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Channel = obj_
            obj_.original_tagname_ = 'Channel'
# end class ChannelsType


class ChannelType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ChannelN=None, Nominals=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ChannelN = ChannelN
        self.ChannelN_nsprefix_ = None
        self.Nominals = Nominals
        self.Nominals_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChannelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChannelType.subclass:
            return ChannelType.subclass(*args_, **kwargs_)
        else:
            return ChannelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ChannelN(self):
        return self.ChannelN
    def set_ChannelN(self, ChannelN):
        self.ChannelN = ChannelN
    def get_Nominals(self):
        return self.Nominals
    def set_Nominals(self, Nominals):
        self.Nominals = Nominals
    def hasContent_(self):
        if (
            self.ChannelN is not None or
            self.Nominals is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ChannelType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ChannelType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ChannelType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ChannelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ChannelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ChannelType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ChannelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChannelN is not None:
            namespaceprefix_ = self.ChannelN_nsprefix_ + ':' if (UseCapturedNS_ and self.ChannelN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChannelN>%s</%sChannelN>%s' % (namespaceprefix_ , self.gds_format_integer(self.ChannelN, input_name='ChannelN'), namespaceprefix_ , eol_))
        if self.Nominals is not None:
            namespaceprefix_ = self.Nominals_nsprefix_ + ':' if (UseCapturedNS_ and self.Nominals_nsprefix_) else ''
            self.Nominals.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Nominals', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ChannelN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ChannelN')
            ival_ = self.gds_validate_integer(ival_, node, 'ChannelN')
            self.ChannelN = ival_
            self.ChannelN_nsprefix_ = child_.prefix
        elif nodeName_ == 'Nominals':
            obj_ = NominalsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Nominals = obj_
            obj_.original_tagname_ = 'Nominals'
# end class ChannelType


class NominalsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Nominal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Nominal is None:
            self.Nominal = []
        else:
            self.Nominal = Nominal
        self.Nominal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NominalsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NominalsType.subclass:
            return NominalsType.subclass(*args_, **kwargs_)
        else:
            return NominalsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Nominal(self):
        return self.Nominal
    def set_Nominal(self, Nominal):
        self.Nominal = Nominal
    def add_Nominal(self, value):
        self.Nominal.append(value)
    def insert_Nominal_at(self, index, value):
        self.Nominal.insert(index, value)
    def replace_Nominal_at(self, index, value):
        self.Nominal[index] = value
    def hasContent_(self):
        if (
            self.Nominal
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NominalsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NominalsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NominalsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NominalsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NominalsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NominalsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NominalsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Nominal_ in self.Nominal:
            namespaceprefix_ = self.Nominal_nsprefix_ + ':' if (UseCapturedNS_ and self.Nominal_nsprefix_) else ''
            Nominal_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Nominal', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Nominal':
            obj_ = NominalType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Nominal.append(obj_)
            obj_.original_tagname_ = 'Nominal'
# end class NominalsType


class NominalType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OrderN=None, ChannelN=None, WeighingsCount=None, NominalValue=None, VolumeUnit=None, Avg=None, AbsDeviation=None, RelDeviation=None, AbsSKO=None, RelSKO=None, Uncertainty=None, PipetteAbsDeviation=None, PipetteRelDeviation=None, PipetteAbsSKO=None, PipetteRelSKO=None, Result=None, Weighings=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OrderN = OrderN
        self.OrderN_nsprefix_ = None
        self.ChannelN = ChannelN
        self.ChannelN_nsprefix_ = None
        self.WeighingsCount = WeighingsCount
        self.WeighingsCount_nsprefix_ = None
        self.NominalValue = NominalValue
        self.NominalValue_nsprefix_ = None
        self.VolumeUnit = VolumeUnit
        self.VolumeUnit_nsprefix_ = None
        self.Avg = Avg
        self.Avg_nsprefix_ = None
        self.AbsDeviation = AbsDeviation
        self.AbsDeviation_nsprefix_ = None
        self.RelDeviation = RelDeviation
        self.RelDeviation_nsprefix_ = None
        self.AbsSKO = AbsSKO
        self.AbsSKO_nsprefix_ = None
        self.RelSKO = RelSKO
        self.RelSKO_nsprefix_ = None
        self.Uncertainty = Uncertainty
        self.Uncertainty_nsprefix_ = None
        self.PipetteAbsDeviation = PipetteAbsDeviation
        self.PipetteAbsDeviation_nsprefix_ = None
        self.PipetteRelDeviation = PipetteRelDeviation
        self.PipetteRelDeviation_nsprefix_ = None
        self.PipetteAbsSKO = PipetteAbsSKO
        self.PipetteAbsSKO_nsprefix_ = None
        self.PipetteRelSKO = PipetteRelSKO
        self.PipetteRelSKO_nsprefix_ = None
        self.Result = Result
        self.Result_nsprefix_ = None
        self.Weighings = Weighings
        self.Weighings_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NominalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NominalType.subclass:
            return NominalType.subclass(*args_, **kwargs_)
        else:
            return NominalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OrderN(self):
        return self.OrderN
    def set_OrderN(self, OrderN):
        self.OrderN = OrderN
    def get_ChannelN(self):
        return self.ChannelN
    def set_ChannelN(self, ChannelN):
        self.ChannelN = ChannelN
    def get_WeighingsCount(self):
        return self.WeighingsCount
    def set_WeighingsCount(self, WeighingsCount):
        self.WeighingsCount = WeighingsCount
    def get_NominalValue(self):
        return self.NominalValue
    def set_NominalValue(self, NominalValue):
        self.NominalValue = NominalValue
    def get_VolumeUnit(self):
        return self.VolumeUnit
    def set_VolumeUnit(self, VolumeUnit):
        self.VolumeUnit = VolumeUnit
    def get_Avg(self):
        return self.Avg
    def set_Avg(self, Avg):
        self.Avg = Avg
    def get_AbsDeviation(self):
        return self.AbsDeviation
    def set_AbsDeviation(self, AbsDeviation):
        self.AbsDeviation = AbsDeviation
    def get_RelDeviation(self):
        return self.RelDeviation
    def set_RelDeviation(self, RelDeviation):
        self.RelDeviation = RelDeviation
    def get_AbsSKO(self):
        return self.AbsSKO
    def set_AbsSKO(self, AbsSKO):
        self.AbsSKO = AbsSKO
    def get_RelSKO(self):
        return self.RelSKO
    def set_RelSKO(self, RelSKO):
        self.RelSKO = RelSKO
    def get_Uncertainty(self):
        return self.Uncertainty
    def set_Uncertainty(self, Uncertainty):
        self.Uncertainty = Uncertainty
    def get_PipetteAbsDeviation(self):
        return self.PipetteAbsDeviation
    def set_PipetteAbsDeviation(self, PipetteAbsDeviation):
        self.PipetteAbsDeviation = PipetteAbsDeviation
    def get_PipetteRelDeviation(self):
        return self.PipetteRelDeviation
    def set_PipetteRelDeviation(self, PipetteRelDeviation):
        self.PipetteRelDeviation = PipetteRelDeviation
    def get_PipetteAbsSKO(self):
        return self.PipetteAbsSKO
    def set_PipetteAbsSKO(self, PipetteAbsSKO):
        self.PipetteAbsSKO = PipetteAbsSKO
    def get_PipetteRelSKO(self):
        return self.PipetteRelSKO
    def set_PipetteRelSKO(self, PipetteRelSKO):
        self.PipetteRelSKO = PipetteRelSKO
    def get_Result(self):
        return self.Result
    def set_Result(self, Result):
        self.Result = Result
    def get_Weighings(self):
        return self.Weighings
    def set_Weighings(self, Weighings):
        self.Weighings = Weighings
    def hasContent_(self):
        if (
            self.OrderN is not None or
            self.ChannelN is not None or
            self.WeighingsCount is not None or
            self.NominalValue is not None or
            self.VolumeUnit is not None or
            self.Avg is not None or
            self.AbsDeviation is not None or
            self.RelDeviation is not None or
            self.AbsSKO is not None or
            self.RelSKO is not None or
            self.Uncertainty is not None or
            self.PipetteAbsDeviation is not None or
            self.PipetteRelDeviation is not None or
            self.PipetteAbsSKO is not None or
            self.PipetteRelSKO is not None or
            self.Result is not None or
            self.Weighings is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NominalType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NominalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NominalType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NominalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NominalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NominalType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NominalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderN is not None:
            namespaceprefix_ = self.OrderN_nsprefix_ + ':' if (UseCapturedNS_ and self.OrderN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderN>%s</%sOrderN>%s' % (namespaceprefix_ , self.gds_format_integer(self.OrderN, input_name='OrderN'), namespaceprefix_ , eol_))
        if self.ChannelN is not None:
            namespaceprefix_ = self.ChannelN_nsprefix_ + ':' if (UseCapturedNS_ and self.ChannelN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChannelN>%s</%sChannelN>%s' % (namespaceprefix_ , self.gds_format_integer(self.ChannelN, input_name='ChannelN'), namespaceprefix_ , eol_))
        if self.WeighingsCount is not None:
            namespaceprefix_ = self.WeighingsCount_nsprefix_ + ':' if (UseCapturedNS_ and self.WeighingsCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeighingsCount>%s</%sWeighingsCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.WeighingsCount, input_name='WeighingsCount'), namespaceprefix_ , eol_))
        if self.NominalValue is not None:
            namespaceprefix_ = self.NominalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.NominalValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNominalValue>%s</%sNominalValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.NominalValue, input_name='NominalValue'), namespaceprefix_ , eol_))
        if self.VolumeUnit is not None:
            namespaceprefix_ = self.VolumeUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.VolumeUnit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeUnit>%s</%sVolumeUnit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VolumeUnit), input_name='VolumeUnit')), namespaceprefix_ , eol_))
        if self.Avg is not None:
            namespaceprefix_ = self.Avg_nsprefix_ + ':' if (UseCapturedNS_ and self.Avg_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvg>%s</%sAvg>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Avg, input_name='Avg'), namespaceprefix_ , eol_))
        if self.AbsDeviation is not None:
            namespaceprefix_ = self.AbsDeviation_nsprefix_ + ':' if (UseCapturedNS_ and self.AbsDeviation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAbsDeviation>%s</%sAbsDeviation>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AbsDeviation, input_name='AbsDeviation'), namespaceprefix_ , eol_))
        if self.RelDeviation is not None:
            namespaceprefix_ = self.RelDeviation_nsprefix_ + ':' if (UseCapturedNS_ and self.RelDeviation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelDeviation>%s</%sRelDeviation>%s' % (namespaceprefix_ , self.gds_format_decimal(self.RelDeviation, input_name='RelDeviation'), namespaceprefix_ , eol_))
        if self.AbsSKO is not None:
            namespaceprefix_ = self.AbsSKO_nsprefix_ + ':' if (UseCapturedNS_ and self.AbsSKO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAbsSKO>%s</%sAbsSKO>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AbsSKO, input_name='AbsSKO'), namespaceprefix_ , eol_))
        if self.RelSKO is not None:
            namespaceprefix_ = self.RelSKO_nsprefix_ + ':' if (UseCapturedNS_ and self.RelSKO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelSKO>%s</%sRelSKO>%s' % (namespaceprefix_ , self.gds_format_decimal(self.RelSKO, input_name='RelSKO'), namespaceprefix_ , eol_))
        if self.Uncertainty is not None:
            namespaceprefix_ = self.Uncertainty_nsprefix_ + ':' if (UseCapturedNS_ and self.Uncertainty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUncertainty>%s</%sUncertainty>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Uncertainty, input_name='Uncertainty'), namespaceprefix_ , eol_))
        if self.PipetteAbsDeviation is not None:
            namespaceprefix_ = self.PipetteAbsDeviation_nsprefix_ + ':' if (UseCapturedNS_ and self.PipetteAbsDeviation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPipetteAbsDeviation>%s</%sPipetteAbsDeviation>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PipetteAbsDeviation, input_name='PipetteAbsDeviation'), namespaceprefix_ , eol_))
        if self.PipetteRelDeviation is not None:
            namespaceprefix_ = self.PipetteRelDeviation_nsprefix_ + ':' if (UseCapturedNS_ and self.PipetteRelDeviation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPipetteRelDeviation>%s</%sPipetteRelDeviation>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PipetteRelDeviation, input_name='PipetteRelDeviation'), namespaceprefix_ , eol_))
        if self.PipetteAbsSKO is not None:
            namespaceprefix_ = self.PipetteAbsSKO_nsprefix_ + ':' if (UseCapturedNS_ and self.PipetteAbsSKO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPipetteAbsSKO>%s</%sPipetteAbsSKO>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PipetteAbsSKO, input_name='PipetteAbsSKO'), namespaceprefix_ , eol_))
        if self.PipetteRelSKO is not None:
            namespaceprefix_ = self.PipetteRelSKO_nsprefix_ + ':' if (UseCapturedNS_ and self.PipetteRelSKO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPipetteRelSKO>%s</%sPipetteRelSKO>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PipetteRelSKO, input_name='PipetteRelSKO'), namespaceprefix_ , eol_))
        if self.Result is not None:
            namespaceprefix_ = self.Result_nsprefix_ + ':' if (UseCapturedNS_ and self.Result_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResult>%s</%sResult>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Result), input_name='Result')), namespaceprefix_ , eol_))
        if self.Weighings is not None:
            namespaceprefix_ = self.Weighings_nsprefix_ + ':' if (UseCapturedNS_ and self.Weighings_nsprefix_) else ''
            self.Weighings.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weighings', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OrderN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'OrderN')
            ival_ = self.gds_validate_integer(ival_, node, 'OrderN')
            self.OrderN = ival_
            self.OrderN_nsprefix_ = child_.prefix
        elif nodeName_ == 'ChannelN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ChannelN')
            ival_ = self.gds_validate_integer(ival_, node, 'ChannelN')
            self.ChannelN = ival_
            self.ChannelN_nsprefix_ = child_.prefix
        elif nodeName_ == 'WeighingsCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'WeighingsCount')
            ival_ = self.gds_validate_integer(ival_, node, 'WeighingsCount')
            self.WeighingsCount = ival_
            self.WeighingsCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'NominalValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NominalValue')
            ival_ = self.gds_validate_integer(ival_, node, 'NominalValue')
            self.NominalValue = ival_
            self.NominalValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'VolumeUnit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VolumeUnit')
            value_ = self.gds_validate_string(value_, node, 'VolumeUnit')
            self.VolumeUnit = value_
            self.VolumeUnit_nsprefix_ = child_.prefix
        elif nodeName_ == 'Avg' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Avg')
            fval_ = self.gds_validate_decimal(fval_, node, 'Avg')
            self.Avg = fval_
            self.Avg_nsprefix_ = child_.prefix
        elif nodeName_ == 'AbsDeviation' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AbsDeviation')
            fval_ = self.gds_validate_decimal(fval_, node, 'AbsDeviation')
            self.AbsDeviation = fval_
            self.AbsDeviation_nsprefix_ = child_.prefix
        elif nodeName_ == 'RelDeviation' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'RelDeviation')
            fval_ = self.gds_validate_decimal(fval_, node, 'RelDeviation')
            self.RelDeviation = fval_
            self.RelDeviation_nsprefix_ = child_.prefix
        elif nodeName_ == 'AbsSKO' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AbsSKO')
            fval_ = self.gds_validate_decimal(fval_, node, 'AbsSKO')
            self.AbsSKO = fval_
            self.AbsSKO_nsprefix_ = child_.prefix
        elif nodeName_ == 'RelSKO' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'RelSKO')
            fval_ = self.gds_validate_decimal(fval_, node, 'RelSKO')
            self.RelSKO = fval_
            self.RelSKO_nsprefix_ = child_.prefix
        elif nodeName_ == 'Uncertainty' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Uncertainty')
            fval_ = self.gds_validate_decimal(fval_, node, 'Uncertainty')
            self.Uncertainty = fval_
            self.Uncertainty_nsprefix_ = child_.prefix
        elif nodeName_ == 'PipetteAbsDeviation' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PipetteAbsDeviation')
            fval_ = self.gds_validate_decimal(fval_, node, 'PipetteAbsDeviation')
            self.PipetteAbsDeviation = fval_
            self.PipetteAbsDeviation_nsprefix_ = child_.prefix
        elif nodeName_ == 'PipetteRelDeviation' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PipetteRelDeviation')
            fval_ = self.gds_validate_decimal(fval_, node, 'PipetteRelDeviation')
            self.PipetteRelDeviation = fval_
            self.PipetteRelDeviation_nsprefix_ = child_.prefix
        elif nodeName_ == 'PipetteAbsSKO' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PipetteAbsSKO')
            fval_ = self.gds_validate_decimal(fval_, node, 'PipetteAbsSKO')
            self.PipetteAbsSKO = fval_
            self.PipetteAbsSKO_nsprefix_ = child_.prefix
        elif nodeName_ == 'PipetteRelSKO' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PipetteRelSKO')
            fval_ = self.gds_validate_decimal(fval_, node, 'PipetteRelSKO')
            self.PipetteRelSKO = fval_
            self.PipetteRelSKO_nsprefix_ = child_.prefix
        elif nodeName_ == 'Result':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Result')
            value_ = self.gds_validate_string(value_, node, 'Result')
            self.Result = value_
            self.Result_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weighings':
            obj_ = WeighingsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weighings = obj_
            obj_.original_tagname_ = 'Weighings'
# end class NominalType


class WeighingsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Weighing=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Weighing is None:
            self.Weighing = []
        else:
            self.Weighing = Weighing
        self.Weighing_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeighingsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeighingsType.subclass:
            return WeighingsType.subclass(*args_, **kwargs_)
        else:
            return WeighingsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Weighing(self):
        return self.Weighing
    def set_Weighing(self, Weighing):
        self.Weighing = Weighing
    def add_Weighing(self, value):
        self.Weighing.append(value)
    def insert_Weighing_at(self, index, value):
        self.Weighing.insert(index, value)
    def replace_Weighing_at(self, index, value):
        self.Weighing[index] = value
    def hasContent_(self):
        if (
            self.Weighing
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeighingsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WeighingsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WeighingsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WeighingsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WeighingsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Weighing_ in self.Weighing:
            namespaceprefix_ = self.Weighing_nsprefix_ + ':' if (UseCapturedNS_ and self.Weighing_nsprefix_) else ''
            Weighing_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weighing', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Weighing':
            obj_ = WeighingType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weighing.append(obj_)
            obj_.original_tagname_ = 'Weighing'
# end class WeighingsType


class WeighingType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OrderN=None, Weight=None, Volume=None, WeightD=None, VolumeD=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OrderN = OrderN
        self.OrderN_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.Volume = Volume
        self.Volume_nsprefix_ = None
        self.WeightD = WeightD
        self.WeightD_nsprefix_ = None
        self.VolumeD = VolumeD
        self.VolumeD_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeighingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeighingType.subclass:
            return WeighingType.subclass(*args_, **kwargs_)
        else:
            return WeighingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OrderN(self):
        return self.OrderN
    def set_OrderN(self, OrderN):
        self.OrderN = OrderN
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Volume(self):
        return self.Volume
    def set_Volume(self, Volume):
        self.Volume = Volume
    def get_WeightD(self):
        return self.WeightD
    def set_WeightD(self, WeightD):
        self.WeightD = WeightD
    def get_VolumeD(self):
        return self.VolumeD
    def set_VolumeD(self, VolumeD):
        self.VolumeD = VolumeD
    def hasContent_(self):
        if (
            self.OrderN is not None or
            self.Weight is not None or
            self.Volume is not None or
            self.WeightD is not None or
            self.VolumeD is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeighingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WeighingType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WeighingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WeighingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WeighingType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderN is not None:
            namespaceprefix_ = self.OrderN_nsprefix_ + ':' if (UseCapturedNS_ and self.OrderN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrderN>%s</%sOrderN>%s' % (namespaceprefix_ , self.gds_format_integer(self.OrderN, input_name='OrderN'), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Weight, input_name='Weight'), namespaceprefix_ , eol_))
        if self.Volume is not None:
            namespaceprefix_ = self.Volume_nsprefix_ + ':' if (UseCapturedNS_ and self.Volume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolume>%s</%sVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Volume, input_name='Volume'), namespaceprefix_ , eol_))
        if self.WeightD is not None:
            namespaceprefix_ = self.WeightD_nsprefix_ + ':' if (UseCapturedNS_ and self.WeightD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightD>%s</%sWeightD>%s' % (namespaceprefix_ , self.gds_format_decimal(self.WeightD, input_name='WeightD'), namespaceprefix_ , eol_))
        if self.VolumeD is not None:
            namespaceprefix_ = self.VolumeD_nsprefix_ + ':' if (UseCapturedNS_ and self.VolumeD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeD>%s</%sVolumeD>%s' % (namespaceprefix_ , self.gds_format_decimal(self.VolumeD, input_name='VolumeD'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OrderN' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'OrderN')
            ival_ = self.gds_validate_integer(ival_, node, 'OrderN')
            self.OrderN = ival_
            self.OrderN_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Weight')
            fval_ = self.gds_validate_decimal(fval_, node, 'Weight')
            self.Weight = fval_
            self.Weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'Volume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Volume')
            fval_ = self.gds_validate_decimal(fval_, node, 'Volume')
            self.Volume = fval_
            self.Volume_nsprefix_ = child_.prefix
        elif nodeName_ == 'WeightD' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'WeightD')
            fval_ = self.gds_validate_decimal(fval_, node, 'WeightD')
            self.WeightD = fval_
            self.WeightD_nsprefix_ = child_.prefix
        elif nodeName_ == 'VolumeD' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'VolumeD')
            fval_ = self.gds_validate_decimal(fval_, node, 'VolumeD')
            self.VolumeD = fval_
            self.VolumeD_nsprefix_ = child_.prefix
# end class WeighingType


class MethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MethodType_member=None, Name=None, Test11Header=None, Test21Header=None, AirTemp=None, AirHum=None, AirPress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MethodType = MethodType_member
        self.MethodType_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Test11Header = Test11Header
        self.Test11Header_nsprefix_ = None
        self.Test21Header = Test21Header
        self.Test21Header_nsprefix_ = None
        self.AirTemp = AirTemp
        self.AirTemp_nsprefix_ = None
        self.AirHum = AirHum
        self.AirHum_nsprefix_ = None
        self.AirPress = AirPress
        self.AirPress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MethodType.subclass:
            return MethodType.subclass(*args_, **kwargs_)
        else:
            return MethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MethodType(self):
        return self.MethodType
    def set_MethodType(self, MethodType):
        self.MethodType = MethodType
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Test11Header(self):
        return self.Test11Header
    def set_Test11Header(self, Test11Header):
        self.Test11Header = Test11Header
    def get_Test21Header(self):
        return self.Test21Header
    def set_Test21Header(self, Test21Header):
        self.Test21Header = Test21Header
    def get_AirTemp(self):
        return self.AirTemp
    def set_AirTemp(self, AirTemp):
        self.AirTemp = AirTemp
    def get_AirHum(self):
        return self.AirHum
    def set_AirHum(self, AirHum):
        self.AirHum = AirHum
    def get_AirPress(self):
        return self.AirPress
    def set_AirPress(self, AirPress):
        self.AirPress = AirPress
    def hasContent_(self):
        if (
            self.MethodType is not None or
            self.Name is not None or
            self.Test11Header is not None or
            self.Test21Header is not None or
            self.AirTemp is not None or
            self.AirHum is not None or
            self.AirPress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MethodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MethodType is not None:
            namespaceprefix_ = self.MethodType_nsprefix_ + ':' if (UseCapturedNS_ and self.MethodType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMethodType>%s</%sMethodType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MethodType), input_name='MethodType')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Test11Header is not None:
            namespaceprefix_ = self.Test11Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Test11Header_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest11Header>%s</%sTest11Header>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test11Header), input_name='Test11Header')), namespaceprefix_ , eol_))
        if self.Test21Header is not None:
            namespaceprefix_ = self.Test21Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Test21Header_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest21Header>%s</%sTest21Header>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Test21Header), input_name='Test21Header')), namespaceprefix_ , eol_))
        if self.AirTemp is not None:
            namespaceprefix_ = self.AirTemp_nsprefix_ + ':' if (UseCapturedNS_ and self.AirTemp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirTemp>%s</%sAirTemp>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirTemp), input_name='AirTemp')), namespaceprefix_ , eol_))
        if self.AirHum is not None:
            namespaceprefix_ = self.AirHum_nsprefix_ + ':' if (UseCapturedNS_ and self.AirHum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirHum>%s</%sAirHum>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirHum), input_name='AirHum')), namespaceprefix_ , eol_))
        if self.AirPress is not None:
            namespaceprefix_ = self.AirPress_nsprefix_ + ':' if (UseCapturedNS_ and self.AirPress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirPress>%s</%sAirPress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirPress), input_name='AirPress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MethodType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MethodType')
            value_ = self.gds_validate_string(value_, node, 'MethodType')
            self.MethodType = value_
            self.MethodType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test11Header':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test11Header')
            value_ = self.gds_validate_string(value_, node, 'Test11Header')
            self.Test11Header = value_
            self.Test11Header_nsprefix_ = child_.prefix
        elif nodeName_ == 'Test21Header':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Test21Header')
            value_ = self.gds_validate_string(value_, node, 'Test21Header')
            self.Test21Header = value_
            self.Test21Header_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirTemp':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirTemp')
            value_ = self.gds_validate_string(value_, node, 'AirTemp')
            self.AirTemp = value_
            self.AirTemp_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirHum':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirHum')
            value_ = self.gds_validate_string(value_, node, 'AirHum')
            self.AirHum = value_
            self.AirHum_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirPress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirPress')
            value_ = self.gds_validate_string(value_, node, 'AirPress')
            self.AirPress = value_
            self.AirPress_nsprefix_ = child_.prefix
# end class MethodType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Protocol'
        rootClass = Protocol
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Protocol'
        rootClass = Protocol
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if mapping is None:
        mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping, nsmap_=nsmap)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Protocol'
        rootClass = Protocol
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Protocol'
        rootClass = Protocol
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from plink import *\n\n')
        sys.stdout.write('import plink as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings = {}

__all__ = [
    "ChannelType",
    "ChannelsType",
    "MethodType",
    "NominalType",
    "NominalsType",
    "OwnerType",
    "PipetteType",
    "PipetteTypeType",
    "Protocol",
    "ScaleType",
    "ScaleTypeType",
    "VerifUserType",
    "WeighingType",
    "WeighingsType"
]
